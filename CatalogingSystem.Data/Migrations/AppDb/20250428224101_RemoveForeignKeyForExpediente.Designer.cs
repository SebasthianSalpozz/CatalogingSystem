// <auto-generated />
using System;
using CatalogingSystem.Data.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CatalogingSystem.Data.Migrations.AppDb
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250428224101_RemoveForeignKeyForExpediente")]
    partial class RemoveForeignKeyForExpediente
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CatalogingSystem.Core.Entities.ArchivoAdministrativo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("archivoDocumental")
                        .HasColumnType("text");

                    b.Property<string>("asunto")
                        .HasColumnType("text");

                    b.Property<string>("documentoOrigen")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("expediente")
                        .HasColumnType("bigint");

                    b.Property<string>("expedienteAnterior")
                        .HasColumnType("text");

                    b.Property<DateTime?>("fechaFinal")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("fechaInicial")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("historial")
                        .HasColumnType("text");

                    b.Property<string>("institucion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("observaciones")
                        .HasColumnType("text");

                    b.Property<bool?>("peticionTransferencia")
                        .HasColumnType("boolean");

                    b.Property<string>("serie")
                        .HasColumnType("text");

                    b.Property<string>("unidad")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("expediente")
                        .IsUnique();

                    b.ToTable("ArchivosAdministrativos");
                });

            modelBuilder.Entity("CatalogingSystem.Core.Entities.Identification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<long>("expediente")
                        .HasColumnType("bigint");

                    b.Property<string>("genericClassification")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("inventory")
                        .HasColumnType("bigint");

                    b.Property<int>("numberOfObjects")
                        .HasColumnType("integer");

                    b.Property<string>("objectName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("observations")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("expediente");

                    b.ToTable("Identifications");
                });

            modelBuilder.Entity("CatalogingSystem.Core.Entities.Identification", b =>
                {
                    b.HasOne("CatalogingSystem.Core.Entities.ArchivoAdministrativo", "ArchivoAdministrativo")
                        .WithMany()
                        .HasForeignKey("expediente")
                        .HasPrincipalKey("expediente")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("CatalogingSystem.Core.Entities.Author", "author", b1 =>
                        {
                            b1.Property<Guid>("IdentificationId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("BirthDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("BirthPlace")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime?>("DeathDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("DeathPlace")
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("IdentificationId");

                            b1.ToTable("Identifications");

                            b1.WithOwner()
                                .HasForeignKey("IdentificationId");
                        });

                    b.OwnsOne("CatalogingSystem.Core.Entities.Material", "material", b1 =>
                        {
                            b1.Property<Guid>("IdentificationId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Colors")
                                .HasColumnType("text");

                            b1.Property<string>("DescribedPart")
                                .HasColumnType("text");

                            b1.Property<string>("MaterialName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("IdentificationId");

                            b1.ToTable("Identifications");

                            b1.WithOwner()
                                .HasForeignKey("IdentificationId");
                        });

                    b.OwnsOne("CatalogingSystem.Core.Entities.Section", "section", b1 =>
                        {
                            b1.Property<Guid>("IdentificationId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Courtyard")
                                .HasColumnType("text");

                            b1.Property<string>("DisplayCase")
                                .HasColumnType("text");

                            b1.Property<string>("Easel")
                                .HasColumnType("text");

                            b1.Property<string>("Others")
                                .HasColumnType("text");

                            b1.Property<string>("Panel")
                                .HasColumnType("text");

                            b1.Property<string>("Pillar")
                                .HasColumnType("text");

                            b1.Property<string>("Room")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Storage")
                                .HasColumnType("text");

                            b1.HasKey("IdentificationId");

                            b1.ToTable("Identifications");

                            b1.WithOwner()
                                .HasForeignKey("IdentificationId");
                        });

                    b.OwnsOne("CatalogingSystem.Core.Entities.SpecificName", "specificName", b1 =>
                        {
                            b1.Property<Guid>("IdentificationId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("GenericName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Notes")
                                .HasColumnType("text");

                            b1.Property<string>("RelatedTerms")
                                .HasColumnType("text");

                            b1.Property<string>("SpecificTerms")
                                .HasColumnType("text");

                            b1.Property<string>("UsedBy")
                                .HasColumnType("text");

                            b1.HasKey("IdentificationId");

                            b1.ToTable("Identifications");

                            b1.WithOwner()
                                .HasForeignKey("IdentificationId");
                        });

                    b.OwnsOne("CatalogingSystem.Core.Entities.Technique", "techniques", b1 =>
                        {
                            b1.Property<Guid>("IdentificationId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("DescribedPart")
                                .HasColumnType("text");

                            b1.Property<string>("TechniqueName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("IdentificationId");

                            b1.ToTable("Identifications");

                            b1.WithOwner()
                                .HasForeignKey("IdentificationId");
                        });

                    b.OwnsOne("CatalogingSystem.Core.Entities.Title", "title", b1 =>
                        {
                            b1.Property<Guid>("IdentificationId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Attribution")
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Translation")
                                .HasColumnType("text");

                            b1.HasKey("IdentificationId");

                            b1.ToTable("Identifications");

                            b1.WithOwner()
                                .HasForeignKey("IdentificationId");
                        });

                    b.OwnsOne("CatalogingSystem.Core.Entities.Typology", "typology", b1 =>
                        {
                            b1.Property<Guid>("IdentificationId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Class")
                                .HasColumnType("text");

                            b1.Property<string>("Order")
                                .HasColumnType("text");

                            b1.Property<string>("Subclass")
                                .HasColumnType("text");

                            b1.Property<string>("Suborder")
                                .HasColumnType("text");

                            b1.Property<string>("Subtype")
                                .HasColumnType("text");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("IdentificationId");

                            b1.ToTable("Identifications");

                            b1.WithOwner()
                                .HasForeignKey("IdentificationId");
                        });

                    b.Navigation("ArchivoAdministrativo");

                    b.Navigation("author")
                        .IsRequired();

                    b.Navigation("material")
                        .IsRequired();

                    b.Navigation("section")
                        .IsRequired();

                    b.Navigation("specificName")
                        .IsRequired();

                    b.Navigation("techniques")
                        .IsRequired();

                    b.Navigation("title")
                        .IsRequired();

                    b.Navigation("typology")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
